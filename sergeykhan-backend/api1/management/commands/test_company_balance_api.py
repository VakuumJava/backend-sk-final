from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from rest_framework.authtoken.models import Token
from api1.models import CompanyBalance, CompanyBalanceLog
import requests
import json

User = get_user_model()

class Command(BaseCommand):
    help = '–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç API endpoints –±–∞–ª–∞–Ω—Å–∞ –∫–æ–º–ø–∞–Ω–∏–∏ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π'

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('üîß –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç API endpoints –±–∞–ª–∞–Ω—Å–∞ –∫–æ–º–ø–∞–Ω–∏–∏'))
        self.stdout.write('=' * 70)
        
        # 1. –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        try:
            admin_user = User.objects.get(email='testadmin@example.com')
            self.stdout.write(f'‚úÖ –ù–∞–π–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {admin_user.email}')
        except User.DoesNotExist:
            admin_user = User.objects.create_user(
                email='testadmin@example.com',
                password='admin123',
                role='super-admin'
            )
            self.stdout.write(f'‚úÖ –°–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {admin_user.email}')
        
        # 2. –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
        token, created = Token.objects.get_or_create(user=admin_user)
        if created:
            self.stdout.write('‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω')
        else:
            self.stdout.write('‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω')
        
        # 3. –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∫–æ–º–ø–∞–Ω–∏–∏
        company_balance = CompanyBalance.get_instance()
        self.stdout.write(f'‚úÖ –ë–∞–ª–∞–Ω—Å –∫–æ–º–ø–∞–Ω–∏–∏: {company_balance.amount}')
        
        # 4. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ª–æ–≥
        from decimal import Decimal
        test_log = CompanyBalanceLog.objects.create(
            action_type='top_up',
            amount=Decimal('5000.00'),
            reason='–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç API endpoint',
            performed_by=admin_user,
            old_value=company_balance.amount,
            new_value=company_balance.amount + Decimal('5000.00')
        )
        self.stdout.write(f'‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ª–æ–≥: ID={test_log.id}')
        
        # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º API endpoints
        base_url = "http://localhost:8000"
        headers = {
            'Authorization': f'Token {token.key}',
            'Content-Type': 'application/json'
        }
        
        # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –±–∞–ª–∞–Ω—Å–∞ –∫–æ–º–ø–∞–Ω–∏–∏
        self.stdout.write('\nüì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GET /api/company-balance/logs/')
        try:
            response = requests.get(f"{base_url}/api/company-balance/logs/", headers=headers)
            self.stdout.write(f'   Status: {response.status_code}')
            
            if response.status_code == 200:
                data = response.json()
                self.stdout.write(self.style.SUCCESS('   ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –ª–æ–≥–∏!'))
                self.stdout.write(f'   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤: {len(data)}')
                
                if data:
                    first_log = data[0]
                    self.stdout.write('   üìù –ü–µ—Ä–≤—ã–π –ª–æ–≥ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—è:')
                    for field in first_log.keys():
                        self.stdout.write(f'      - {field}')
            else:
                self.stdout.write(self.style.ERROR(f'   ‚ùå –û—à–∏–±–∫–∞: {response.text}'))
                
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}'))
        
        # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∫–æ–º–ø–∞–Ω–∏–∏
        self.stdout.write('\nüì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GET /api/company-balance/')
        try:
            response = requests.get(f"{base_url}/api/company-balance/", headers=headers)
            self.stdout.write(f'   Status: {response.status_code}')
            
            if response.status_code == 200:
                data = response.json()
                self.stdout.write(self.style.SUCCESS('   ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –±–∞–ª–∞–Ω—Å!'))
                self.stdout.write(f'   üí∞ –ë–∞–ª–∞–Ω—Å: {data.get("amount", "–Ω–µ –Ω–∞–π–¥–µ–Ω")}')
            else:
                self.stdout.write(self.style.ERROR(f'   ‚ùå –û—à–∏–±–∫–∞: {response.text}'))
                
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}'))
        
        # –¢–µ—Å—Ç 3: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–æ–º–ø–∞–Ω–∏–∏ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ)
        self.stdout.write('\nüì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ POST /api/company-balance/modify/')
        test_data = {
            'action_type': 'top_up',
            'amount': '1000.00',
            'reason': '–¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API'
        }
        
        try:
            response = requests.post(
                f"{base_url}/api/company-balance/modify/", 
                headers=headers,
                json=test_data
            )
            self.stdout.write(f'   Status: {response.status_code}')
            
            if response.status_code == 200:
                data = response.json()
                self.stdout.write(self.style.SUCCESS('   ‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!'))
                self.stdout.write(f'   üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {data.get("current_balance", "–Ω–µ –Ω–∞–π–¥–µ–Ω")}')
            else:
                self.stdout.write(self.style.ERROR(f'   ‚ùå –û—à–∏–±–∫–∞: {response.text}'))
                
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}'))
        
        # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –Ω–æ–≤—ã–π –ª–æ–≥ —Å–æ–∑–¥–∞–ª—Å—è
        self.stdout.write('\nüì° –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞')
        try:
            response = requests.get(f"{base_url}/api/company-balance/logs/", headers=headers)
            if response.status_code == 200:
                data = response.json()
                self.stdout.write(f'   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤ —Å–µ–π—á–∞—Å: {len(data)}')
                
                # –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥
                if data:
                    latest_log = data[0]  # –ª–æ–≥–∏ —Å–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –ø–æ —É–±—ã–≤–∞–Ω–∏—é –¥–∞—Ç—ã
                    self.stdout.write('   üìù –ü–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥:')
                    self.stdout.write(f'      - –î–µ–π—Å—Ç–≤–∏–µ: {latest_log.get("action_type")}')
                    self.stdout.write(f'      - –°—É–º–º–∞: {latest_log.get("amount")}')
                    self.stdout.write(f'      - –ü—Ä–∏—á–∏–Ω–∞: {latest_log.get("reason")}')
                    self.stdout.write(f'      - –í—ã–ø–æ–ª–Ω–∏–ª: {latest_log.get("performed_by_email")}')
                    
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}'))
        
        self.stdout.write('\n' + '=' * 70)
        self.stdout.write(self.style.SUCCESS('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã API endpoints –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!'))
        self.stdout.write(self.style.SUCCESS('‚úÖ Internal Server Error –∏—Å–ø—Ä–∞–≤–ª–µ–Ω - API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!'))
