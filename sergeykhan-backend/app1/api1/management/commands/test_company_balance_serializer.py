from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from api1.models import CompanyBalance, CompanyBalanceLog
from api1.serializers import CompanyBalanceLogSerializer
import json

User = get_user_model()

class Command(BaseCommand):
    help = '–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π CompanyBalanceLogSerializer'

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CompanyBalanceLogSerializer'))
        self.stdout.write('=' * 60)
        
        # 1. –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            admin_user = User.objects.get(email='test@admin.com')
            self.stdout.write(f'‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {admin_user.email}')
        except User.DoesNotExist:
            admin_user = User.objects.create_user(
                email='test@admin.com',
                password='test123',
                role='super_admin'
            )
            self.stdout.write(f'‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {admin_user.email}')
        
        # 2. –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –±–∞–ª–∞–Ω—Å–∞ –∫–æ–º–ø–∞–Ω–∏–∏
        company_balance, created = CompanyBalance.objects.get_or_create(
            id=1,
            defaults={'amount': 50000.00}
        )
        if created:
            self.stdout.write(f'‚úÖ –°–æ–∑–¥–∞–Ω –±–∞–ª–∞–Ω—Å –∫–æ–º–ø–∞–Ω–∏–∏: {company_balance.amount}')
        else:
            self.stdout.write(f'‚úÖ –ë–∞–ª–∞–Ω—Å –∫–æ–º–ø–∞–Ω–∏–∏: {company_balance.amount}')
        
        # 3. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ª–æ–≥
        from decimal import Decimal
        test_amount = Decimal('10000.00')
        test_log = CompanyBalanceLog.objects.create(
            action_type='add',
            amount=test_amount,
            reason='–¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–∞',
            performed_by=admin_user,
            old_value=company_balance.amount,
            new_value=company_balance.amount + test_amount
        )
        self.stdout.write(f'‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ª–æ–≥: ID={test_log.id}')
        
        # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä
        try:
            serializer = CompanyBalanceLogSerializer(test_log)
            serialized_data = serializer.data
            
            self.stdout.write(self.style.SUCCESS('‚úÖ –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!'))
            self.stdout.write('üìä –°–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:')
            self.stdout.write(json.dumps(serialized_data, indent=2, ensure_ascii=False, default=str))
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}'))
            return
        
        # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö –ª–æ–≥–æ–≤
        try:
            all_logs = CompanyBalanceLog.objects.all()[:5]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5
            serializer = CompanyBalanceLogSerializer(all_logs, many=True)
            serialized_data = serializer.data
            
            self.stdout.write(f'‚úÖ –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —É—Å–ø–µ—à–Ω–∞!')
            self.stdout.write(f'üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤: {len(serialized_data)}')
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}'))
            return
        
        # 6. –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç (–±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç)
        expected_fields = [
            'id', 'action_type', 'action_type_display', 'amount', 'reason',
            'performed_by', 'performed_by_email', 'old_value', 'new_value', 'created_at'
        ]
        
        if serialized_data:
            first_item = serialized_data[0] if isinstance(serialized_data, list) else serialized_data
            actual_fields = set(first_item.keys())
            missing_fields = set(expected_fields) - actual_fields
            extra_fields = actual_fields - set(expected_fields)
            
            if missing_fields:
                self.stdout.write(self.style.WARNING(f'‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è: {missing_fields}'))
            
            if extra_fields:
                self.stdout.write(self.style.WARNING(f'‚ö†Ô∏è  –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {extra_fields}'))
            
            if not missing_fields and not extra_fields:
                self.stdout.write(self.style.SUCCESS('‚úÖ –í—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç!'))
        
        self.stdout.write('=' * 60)
        self.stdout.write(self.style.SUCCESS('üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!'))
