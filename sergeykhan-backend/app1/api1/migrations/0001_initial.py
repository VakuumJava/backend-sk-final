# Generated by Django 5.2 on 2025-06-03 08:54

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CompanyBalance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
            ],
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('number', models.CharField(max_length=50)),
                ('date', models.DateTimeField()),
                ('status', models.CharField(choices=[('обзвонен', 'Обзвонен'), ('не обзвонен', 'Не обзвонен')], default='не обзвонен', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='ProfitDistribution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('master_percent', models.PositiveIntegerField(default=60)),
                ('curator_percent', models.PositiveIntegerField(default=5)),
                ('operator_percent', models.PositiveIntegerField(default=5)),
                ('kassa', models.PositiveIntegerField(default=30)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('master', 'Мастер'), ('operator', 'Оператор'), ('warrant-master', 'Гарантийный мастер'), ('super-admin', 'Супер админ'), ('curator', 'Куратор')], default='master', max_length=20)),
                ('dist', models.PositiveSmallIntegerField(default=0)),
                ('distance_manual_override', models.BooleanField(default=False)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Balance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('paid_amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='balance', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='BalanceLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('balance_type', models.CharField(choices=[('current', 'Текущий баланс'), ('paid', 'Выплаченная сумма')], default='current', max_length=10)),
                ('action_type', models.CharField(choices=[('top_up', 'Пополнение'), ('deduct', 'Списание')], default='top_up', max_length=10)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('reason', models.TextField(default='')),
                ('old_value', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('new_value', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('action', models.CharField(default='legacy', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('performed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='balance_changes_performed', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CalendarEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('start', models.DateTimeField()),
                ('end', models.DateTimeField()),
                ('color', models.CharField(default='#6366F1', max_length=7)),
                ('master', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='calendar_events', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CompanyBalanceLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_type', models.CharField(choices=[('top_up', 'Пополнение'), ('deduct', 'Списание')], default='top_up', max_length=10)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('reason', models.TextField(default='')),
                ('old_value', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('new_value', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('performed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='company_balance_changes_performed', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DistanceSettingsModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('average_check_threshold', models.DecimalField(decimal_places=2, default=65000, help_text='Пороговое значение среднего чека для обычной дистанционки', max_digits=12)),
                ('visible_period_standard', models.PositiveIntegerField(default=28, help_text='Количество часов видимости для обычной дистанционки')),
                ('daily_order_sum_threshold', models.DecimalField(decimal_places=2, default=350000, help_text='Пороговое значение суммы заказов в сутки для суточной дистанционки', max_digits=12)),
                ('net_turnover_threshold', models.DecimalField(decimal_places=2, default=1500000, help_text='Пороговое значение чистого вала за 10 дней для суточной дистанционки', max_digits=12)),
                ('visible_period_daily', models.PositiveIntegerField(default=48, help_text='Количество часов видимости для суточной дистанционки')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('updated_by', models.ForeignKey(blank=True, limit_choices_to={'role': 'super-admin'}, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Настройки дистанционки',
                'verbose_name_plural': 'Настройки дистанционки',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client_name', models.CharField(max_length=255)),
                ('client_phone', models.CharField(max_length=20)),
                ('description', models.TextField()),
                ('street', models.CharField(blank=True, max_length=255, null=True, verbose_name='Улица')),
                ('house_number', models.CharField(blank=True, max_length=50, null=True, verbose_name='Номер дома')),
                ('apartment', models.CharField(blank=True, max_length=50, null=True, verbose_name='Квартира')),
                ('entrance', models.CharField(blank=True, max_length=50, null=True, verbose_name='Подъезд')),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('status', models.CharField(choices=[('новый', 'Новый'), ('в обработке', 'В обработке'), ('назначен', 'Назначен мастеру'), ('выполняется', 'Выполняется'), ('завершен', 'Завершен')], default='новый', max_length=20)),
                ('is_test', models.BooleanField(default=False)),
                ('scheduled_date', models.DateField(blank=True, null=True, verbose_name='Дата выполнения')),
                ('scheduled_time', models.TimeField(blank=True, null=True, verbose_name='Время выполнения')),
                ('estimated_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('final_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('expenses', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('assigned_master', models.ForeignKey(blank=True, limit_choices_to={'role': 'master'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='orders', to=settings.AUTH_USER_MODEL)),
                ('curator', models.ForeignKey(blank=True, limit_choices_to={'role': 'curator'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_orders', to=settings.AUTH_USER_MODEL)),
                ('operator', models.ForeignKey(blank=True, limit_choices_to={'role': 'operator'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='processed_orders', to=settings.AUTH_USER_MODEL)),
                ('transferred_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transferred_orders', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='OrderLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('created', 'Заказ создан'), ('status_changed', 'Статус изменен'), ('master_assigned', 'Мастер назначен'), ('master_removed', 'Мастер снят'), ('transferred', 'Переведен на гарантию'), ('completed', 'Завершен'), ('deleted', 'Удален'), ('updated', 'Обновлен'), ('cost_updated', 'Стоимость обновлена'), ('approved', 'Одобрен')], max_length=20)),
                ('description', models.TextField()),
                ('old_value', models.TextField(blank=True, null=True)),
                ('new_value', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='api1.order')),
                ('performed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ProfitDistributionSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('advance_percent', models.PositiveIntegerField(default=30, help_text='Аванс мастеру (% от чистой прибыли)')),
                ('initial_kassa_percent', models.PositiveIntegerField(default=70, help_text='Сумма для передачи в кассу (% от чистой прибыли)')),
                ('cash_percent', models.PositiveIntegerField(default=30, help_text='Наличные мастеру сразу (% от общей суммы)')),
                ('balance_percent', models.PositiveIntegerField(default=30, help_text='Зачисление на баланс мастеру (% от общей суммы)')),
                ('curator_percent', models.PositiveIntegerField(default=5, help_text='Зарплата куратору (% от общей суммы)')),
                ('final_kassa_percent', models.PositiveIntegerField(default=35, help_text='Касса компании (% от общей суммы)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('updated_by', models.ForeignKey(blank=True, limit_choices_to={'role__in': ['super-admin', 'admin']}, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Настройки распределения прибыли',
                'verbose_name_plural': 'Настройки распределения прибыли',
            },
        ),
        migrations.CreateModel(
            name='TransactionLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_type', models.CharField(choices=[('balance_top_up', 'Пополнение баланса'), ('balance_deduct', 'Списание с баланса'), ('paid_amount_top_up', 'Пополнение выплаченной суммы'), ('paid_amount_deduct', 'Списание с выплаченной суммы'), ('profit_distribution', 'Распределение прибыли'), ('master_payment', 'Выплата мастеру'), ('curator_salary', 'Зарплата куратору'), ('company_income', 'Доход компании'), ('company_expense', 'Расход компании')], max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api1.order')),
                ('performed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performed_transactions', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MasterAvailability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('master', models.ForeignKey(limit_choices_to={'role': 'master'}, on_delete=django.db.models.deletion.CASCADE, related_name='availability_slots', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['date', 'start_time'],
                'constraints': [models.UniqueConstraint(fields=('master', 'date', 'start_time'), name='unique_master_availability')],
            },
        ),
    ]
