#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤
"""
import os
import sys
import django
from datetime import datetime, timedelta
from django.utils import timezone
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'app1.settings')
django.setup()

from api1.models import CustomUser, Order

def create_additional_test_orders():
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    masters = CustomUser.objects.filter(role='master')
    operators = CustomUser.objects.filter(role='operator')
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
    additional_orders = [
        {
            'client_name': '–í–ª–∞–¥–∏–º–∏—Ä –¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤',
            'client_phone': '+7 (701) 123-45-67',
            'description': '–†–µ–º–æ–Ω—Ç —Å—Ç–∏—Ä–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã Samsung, –Ω–µ —Å–ª–∏–≤–∞–µ—Ç –≤–æ–¥—É',
            'street': '—É–ª. –ê–±–∞—è',
            'house_number': '123',
            'apartment': '45',
            'service_type': '–†–µ–º–æ–Ω—Ç –±—ã—Ç–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–∏',
            'equipment_type': '–°—Ç–∏—Ä–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞',
            'estimated_cost': 4500.0,
            'status': '–Ω–æ–≤—ã–π'
        },
        {
            'client_name': '–ê–π–≥—É–ª—å –¢–µ—Å—Ç–æ–≤–∞',
            'client_phone': '+7 (702) 234-56-78',
            'description': '–ü–æ—Å—É–¥–æ–º–æ–µ—á–Ω–∞—è –º–∞—à–∏–Ω–∞ Bosch –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è',
            'street': '–ø—Ä. –ù–∞–∑–∞—Ä–±–∞–µ–≤–∞',
            'house_number': '56',
            'apartment': '78',
            'service_type': '–†–µ–º–æ–Ω—Ç –±—ã—Ç–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–∏',
            'equipment_type': '–ü–æ—Å—É–¥–æ–º–æ–µ—á–Ω–∞—è –º–∞—à–∏–Ω–∞',
            'estimated_cost': 5200.0,
            'status': '–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ'
        },
        {
            'client_name': '–ù—É—Ä–ª–∞–Ω –¢–æ–∫–∞–µ–≤',
            'client_phone': '+7 (703) 345-67-89',
            'description': '–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä LG –ø—Ä–æ—Ç–µ–∫–∞–µ—Ç, –Ω—É–∂–Ω–∞ —á–∏—Å—Ç–∫–∞',
            'street': '—É–ª. –°–∞—Ç–ø–∞–µ–≤–∞',
            'house_number': '89',
            'apartment': '12',
            'service_type': '–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏',
            'equipment_type': '–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä',
            'estimated_cost': 3200.0,
            'status': '–Ω–∞–∑–Ω–∞—á–µ–Ω'
        },
        {
            'client_name': '–ê–ª–º–∞ –ñ–∞–Ω–æ–≤–∞',
            'client_phone': '+7 (704) 456-78-90',
            'description': '–ú–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ—Å—Ç–∞–ª–∞ –≥—Ä–µ—Ç—å',
            'street': '—É–ª. –¢–æ–ª–µ –±–∏',
            'house_number': '34',
            'apartment': '56',
            'service_type': '–†–µ–º–æ–Ω—Ç –±—ã—Ç–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–∏',
            'equipment_type': '–ú–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∞—è –ø–µ—á—å',
            'estimated_cost': 2800.0,
            'status': '–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è'
        },
        {
            'client_name': '–ê—Å—Ö–∞—Ç –ñ—É–º–∞–±–µ–∫–æ–≤',
            'client_phone': '+7 (705) 567-89-01',
            'description': '–ó–∞–º–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –≤ –ø—ã–ª–µ—Å–æ—Å–µ Dyson',
            'street': '—É–ª. –§—É—Ä–º–∞–Ω–æ–≤–∞',
            'house_number': '91',
            'apartment': '23',
            'service_type': '–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏',
            'equipment_type': '–ü—ã–ª–µ—Å–æ—Å',
            'estimated_cost': 1500.0,
            'status': '–æ–∂–∏–¥–∞–µ—Ç_–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'
        },
        {
            'client_name': '–ì—É–ª—å–Ω–∞—Ä–∞ –ê–±–¥—É–ª–ª–∏–Ω–∞',
            'client_phone': '+7 (706) 678-90-12',
            'description': '–¢–µ–ª–µ–≤–∏–∑–æ—Ä Samsung –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
            'street': '—É–ª. –ë–∞–π—Ç—É—Ä—Å—ã–Ω–æ–≤–∞',
            'house_number': '67',
            'apartment': '89',
            'service_type': '–†–µ–º–æ–Ω—Ç —Ç–µ—Ö–Ω–∏–∫–∏',
            'equipment_type': '–¢–µ–ª–µ–≤–∏–∑–æ—Ä',
            'estimated_cost': 6800.0,
            'status': '–∑–∞–≤–µ—Ä—à–µ–Ω'
        },
        {
            'client_name': '–ï—Ä–ª–∞–Ω –ö–∞—Å—ã–º–æ–≤',
            'client_phone': '+7 (707) 789-01-23',
            'description': '–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ —Å–∏–ª—å–Ω–æ —à—É–º–∏—Ç',
            'street': '—É–ª. –†–æ–∑—ã–±–∞–∫–∏–µ–≤–∞',
            'house_number': '45',
            'apartment': '67',
            'service_type': '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞',
            'equipment_type': '–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫',
            'estimated_cost': 1200.0,
            'status': '–æ—Ç–∫–ª–æ–Ω–µ–Ω'
        },
        {
            'client_name': '–î–∏–∞–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞',
            'client_phone': '+7 (708) 890-12-34',
            'description': '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–∞ Daikin',
            'street': '—É–ª. –ñ–∞–Ω–¥–æ—Å–æ–≤–∞',
            'house_number': '123',
            'apartment': '45',
            'service_type': '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Ö–Ω–∏–∫–∏',
            'equipment_type': '–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä',
            'estimated_cost': 8500.0,
            'status': '–Ω–æ–≤—ã–π'
        }
    ]
    
    created_orders = []
    
    for i, order_data in enumerate(additional_orders):
        # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        if operators.exists() and random.choice([True, False]):
            order_data['operator'] = random.choice(operators)
        
        # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –æ–∂–∏–¥–∞–µ—Ç_–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –∑–∞–≤–µ—Ä—à–µ–Ω
        if order_data['status'] in ['–Ω–∞–∑–Ω–∞—á–µ–Ω', '–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è', '–æ–∂–∏–¥–∞–µ—Ç_–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è', '–∑–∞–≤–µ—Ä—à–µ–Ω'] and masters.exists():
            order_data['assigned_master'] = random.choice(masters)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è
        hours_ago = random.randint(1, 72)  # –æ—Ç 1 –¥–æ 72 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
        created_at = timezone.now() - timedelta(hours=hours_ago, minutes=random.randint(0, 59))
        
        order = Order.objects.create(**order_data)
        order.created_at = created_at
        order.save()
        
        created_orders.append(order)
        
        print(f"‚úÖ –ó–∞–∫–∞–∑ #{order.id}: {order.client_name} - {order.status}")
        if order.operator:
            print(f"   –û–ø–µ—Ä–∞—Ç–æ—Ä: {order.operator.first_name}")
        if order.assigned_master:
            print(f"   –ú–∞—Å—Ç–µ—Ä: {order.assigned_master.first_name}")
    
    print(f"\nüéâ –°–æ–∑–¥–∞–Ω–æ {len(created_orders)} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –∑–∞–∫–∞–∑–∞–º
    print("\n============================================================")
    print("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –í–°–ï–ú –ó–ê–ö–ê–ó–ê–ú")
    print("============================================================")
    
    all_orders = Order.objects.all()
    statuses = {}
    for order in all_orders:
        status = order.status
        if status in statuses:
            statuses[status] += 1
        else:
            statuses[status] = 1
    
    print(f"üìã –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {all_orders.count()}")
    print("\nüìä –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:")
    for status, count in statuses.items():
        print(f"  ‚Ä¢ {status}: {count} –∑–∞–∫–∞–∑–æ–≤")

if __name__ == '__main__':
    create_additional_test_orders()
