#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –º–∞—Å—Ç–µ—Ä–æ–≤
–≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
"""
import os
import sys
import django
from datetime import datetime, timedelta, time
from django.utils import timezone

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'app1.settings')
django.setup()

from api1.models import CustomUser, MasterAvailability, Order


def create_master_schedules():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π"""
    print("üóìÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –º–∞—Å—Ç–µ—Ä–æ–≤...")
    
    masters = CustomUser.objects.filter(role='master')
    if not masters.exists():
        print("‚ùå –ú–∞—Å—Ç–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return
    
    today = timezone.now().date()
    
    # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ 7 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
    for days_ahead in range(7):
        target_date = today + timedelta(days=days_ahead)
        day_name = target_date.strftime('%A')
        
        print(f"\nüìÖ {target_date} ({day_name})")
        
        for i, master in enumerate(masters):
            # –†–∞–∑–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ä–∞–±–æ—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤
            if i % 4 == 0:  # –ú–∞—Å—Ç–µ—Ä 1: –ø–æ–ª–Ω—ã–π –¥–µ–Ω—å
                create_full_day_schedule(master, target_date)
            elif i % 4 == 1:  # –ú–∞—Å—Ç–µ—Ä 2: —É—Ç—Ä–µ–Ω–Ω—è—è —Å–º–µ–Ω–∞
                create_morning_schedule(master, target_date)
            elif i % 4 == 2:  # –ú–∞—Å—Ç–µ—Ä 3: –≤–µ—á–µ—Ä–Ω—è—è —Å–º–µ–Ω–∞
                create_evening_schedule(master, target_date)
            else:  # –ú–∞—Å—Ç–µ—Ä 4: –≤—ã—Ö–æ–¥–Ω–æ–π –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å
                if days_ahead % 3 != 0:  # —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
                    create_partial_schedule(master, target_date)
    
    print(f"\n‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è {masters.count()} –º–∞—Å—Ç–µ—Ä–æ–≤ –Ω–∞ 7 –¥–Ω–µ–π")


def create_full_day_schedule(master, date):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å (9:00-18:00)"""
    schedules = [
        (time(9, 0), time(12, 0)),   # 9:00-12:00
        (time(13, 0), time(16, 0)),  # 13:00-16:00  
        (time(16, 30), time(18, 0))  # 16:30-18:00
    ]
    
    for start_time, end_time in schedules:
        MasterAvailability.objects.get_or_create(
            master=master,
            date=date,
            start_time=start_time,
            defaults={'end_time': end_time}
        )
    
    print(f"  ‚úÖ {master.email}: –ü–æ–ª–Ω—ã–π –¥–µ–Ω—å (9:00-18:00)")


def create_morning_schedule(master, date):
    """–°–æ–∑–¥–∞–µ—Ç —É—Ç—Ä–µ–Ω–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (8:00-14:00)"""
    schedules = [
        (time(8, 0), time(11, 0)),   # 8:00-11:00
        (time(11, 30), time(14, 0))  # 11:30-14:00
    ]
    
    for start_time, end_time in schedules:
        MasterAvailability.objects.get_or_create(
            master=master,
            date=date,
            start_time=start_time,
            defaults={'end_time': end_time}
        )
    
    print(f"  ‚úÖ {master.email}: –£—Ç—Ä–µ–Ω–Ω—è—è —Å–º–µ–Ω–∞ (8:00-14:00)")


def create_evening_schedule(master, date):
    """–°–æ–∑–¥–∞–µ—Ç –≤–µ—á–µ—Ä–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (14:00-20:00)"""
    schedules = [
        (time(14, 0), time(17, 0)),  # 14:00-17:00
        (time(17, 30), time(20, 0))  # 17:30-20:00
    ]
    
    for start_time, end_time in schedules:
        MasterAvailability.objects.get_or_create(
            master=master,
            date=date,
            start_time=start_time,
            defaults={'end_time': end_time}
        )
    
    print(f"  ‚úÖ {master.email}: –í–µ—á–µ—Ä–Ω—è—è —Å–º–µ–Ω–∞ (14:00-20:00)")


def create_partial_schedule(master, date):
    """–°–æ–∑–¥–∞–µ—Ç —á–∞—Å—Ç–∏—á–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ —É—Ç—Ä–æ–º)"""
    MasterAvailability.objects.get_or_create(
        master=master,
        date=date,
        start_time=time(10, 0),
        defaults={'end_time': time(13, 0)}
    )
    
    print(f"  ‚úÖ {master.email}: –ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å (10:00-13:00)")


def assign_some_orders_to_schedule():
    """–ù–∞–∑–Ω–∞—á–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏"""
    print("\nüìã –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")
    
    today = timezone.now().date()
    tomorrow = today + timedelta(days=1)
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –¥–∞—Ç—ã
    unscheduled_orders = Order.objects.filter(
        scheduled_date__isnull=True,
        status__in=['–Ω–æ–≤—ã–π', '–Ω–∞–∑–Ω–∞—á–µ–Ω', '–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ']
    )[:4]
    
    # –ù–∞–∑–Ω–∞—á–∞–µ–º –∑–∞–∫–∞–∑—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞
    for i, order in enumerate(unscheduled_orders):
        if i % 2 == 0:
            order.scheduled_date = today
        else:
            order.scheduled_date = tomorrow
        
        # –ù–∞–∑–Ω–∞—á–∞–µ–º –≤—Ä–µ–º—è
        if i % 4 == 0:
            order.scheduled_time = time(9, 0)
        elif i % 4 == 1:
            order.scheduled_time = time(11, 0)
        elif i % 4 == 2:
            order.scheduled_time = time(14, 0)
        else:
            order.scheduled_time = time(16, 0)
        
        order.save()
        
        date_str = order.scheduled_date.strftime('%Y-%m-%d')
        time_str = order.scheduled_time.strftime('%H:%M')
        print(f"  ‚úÖ –ó–∞–∫–∞–∑ #{order.id} ({order.client_name}): {date_str} –≤ {time_str}")


def show_capacity_summary():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
    print("\nüìä –°–í–û–î–ö–ê –ü–û –ü–†–û–ü–£–°–ö–ù–û–ô –°–ü–û–°–û–ë–ù–û–°–¢–ò")
    print("=" * 50)
    
    today = timezone.now().date()
    
    for days_ahead in range(3):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –¥–Ω—è
        target_date = today + timedelta(days=days_ahead)
        day_name = target_date.strftime('%A')
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–æ—Ç—ã
        total_slots = MasterAvailability.objects.filter(date=target_date).count()
        occupied_slots = Order.objects.filter(
            scheduled_date=target_date,
            status__in=['–Ω–∞–∑–Ω–∞—á–µ–Ω', '–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è', '–≤ —Ä–∞–±–æ—Ç–µ']
        ).count()
        free_slots = total_slots - occupied_slots
        
        utilization = round((occupied_slots / max(1, total_slots)) * 100, 1)
        
        print(f"üìÖ {target_date} ({day_name}):")
        print(f"   –í—Å–µ–≥–æ —Å–ª–æ—Ç–æ–≤: {total_slots}")
        print(f"   –ó–∞–Ω—è—Ç–æ: {occupied_slots}")
        print(f"   –°–≤–æ–±–æ–¥–Ω–æ: {free_slots}")
        print(f"   –ó–∞–≥—Ä—É–∑–∫–∞: {utilization}%")
        print()


if __name__ == "__main__":
    print("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –º–∞—Å—Ç–µ—Ä–æ–≤")
    print("=" * 50)
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    print("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π...")
    MasterAvailability.objects.all().delete()
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    create_master_schedules()
    
    # –ù–∞–∑–Ω–∞—á–∞–µ–º –∑–∞–∫–∞–∑—ã
    assign_some_orders_to_schedule()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
    show_capacity_summary()
    
    print("‚úÖ –ì–û–¢–û–í–û! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
    print("\nüîß –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
    print("curl -H 'Authorization: Token 327c2446fa3e569456c220b7b7cbdb9bcc4ff620' \\")
    print("     http://127.0.0.1:8000/api/capacity/analysis/")
