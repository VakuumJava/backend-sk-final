#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤, –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –∑–∞–∫–∞–∑–æ–≤
–¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
"""
import os
import sys
import django
from datetime import datetime, timedelta
from django.utils import timezone

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'app1.settings')
django.setup()

from api1.models import CustomUser, Order, Balance
from rest_framework.authtoken.models import Token

def create_test_data():
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤
    masters_data = [
        {
            'email': 'master1@test.com',
            'first_name': '–ê–ª–µ–∫—Å–µ–π',
            'last_name': '–ü–µ—Ç—Ä–æ–≤',
            'password': 'test123456',
            'role': 'master'
        },
        {
            'email': 'master2@test.com',
            'first_name': '–î–º–∏—Ç—Ä–∏–π',
            'last_name': '–ò–≤–∞–Ω–æ–≤',
            'password': 'test123456',
            'role': 'master'
        },
        {
            'email': 'master3@test.com',
            'first_name': '–°–µ—Ä–≥–µ–π',
            'last_name': '–°–∏–¥–æ—Ä–æ–≤',
            'password': 'test123456',
            'role': 'master'
        },
        {
            'email': 'master4@test.com',
            'first_name': '–ê–Ω–¥—Ä–µ–π',
            'last_name': '–ö–æ–∑–ª–æ–≤',
            'password': 'test123456',
            'role': 'master'
        }
    ]
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    operators_data = [
        {
            'email': 'operator1@test.com',
            'first_name': '–ú–∞—Ä–∏—è',
            'last_name': '–û–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤–∞',
            'password': 'test123456',
            'role': 'operator'
        },
        {
            'email': 'operator2@test.com',
            'first_name': '–ê–Ω–Ω–∞',
            'last_name': '–î–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤–∞',
            'password': 'test123456',
            'role': 'operator'
        }
    ]
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫—É—Ä–∞—Ç–æ—Ä–∞
    curator_data = {
        'email': 'curator1@test.com',
        'first_name': '–ï–ª–µ–Ω–∞',
        'last_name': '–ö—É—Ä–∞—Ç–æ—Ä–æ–≤–∞',
        'password': 'test123456',
        'role': 'curator'
    }
    
    created_users = []
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–æ–≤
    print("\nüë∑‚Äç‚ôÇÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–æ–≤...")
    for master_data in masters_data:
        user, created = CustomUser.objects.get_or_create(
            email=master_data['email'],
            defaults=master_data
        )
        if created:
            user.set_password(master_data['password'])
            user.save()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞
            token, _ = Token.objects.get_or_create(user=user)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞
            Balance.objects.get_or_create(
                user=user,
                defaults={'amount': 0.0, 'paid_amount': 0.0}
            )
            
            print(f"‚úÖ –ú–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω: {user.first_name} {user.last_name} ({user.email})")
            print(f"   Token: {token.key}")
            created_users.append(user)
        else:
            print(f"‚ö†Ô∏è  –ú–∞—Å—Ç–µ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {user.email}")
            created_users.append(user)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    print("\nüìû –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤...")
    for operator_data in operators_data:
        user, created = CustomUser.objects.get_or_create(
            email=operator_data['email'],
            defaults=operator_data
        )
        if created:
            user.set_password(operator_data['password'])
            user.save()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            token, _ = Token.objects.get_or_create(user=user)
            
            print(f"‚úÖ –û–ø–µ—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω: {user.first_name} {user.last_name} ({user.email})")
            print(f"   Token: {token.key}")
            created_users.append(user)
        else:
            print(f"‚ö†Ô∏è  –û–ø–µ—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {user.email}")
            created_users.append(user)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä–∞
    print("\nüë®‚Äçüíº –°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä–∞...")
    user, created = CustomUser.objects.get_or_create(
        email=curator_data['email'],
        defaults=curator_data
    )
    if created:
        user.set_password(curator_data['password'])
        user.save()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–∞
        token, _ = Token.objects.get_or_create(user=user)
        
        print(f"‚úÖ –ö—É—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω: {user.first_name} {user.last_name} ({user.email})")
        print(f"   Token: {token.key}")
        created_users.append(user)
    else:
        print(f"‚ö†Ô∏è  –ö—É—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {user.email}")
        created_users.append(user)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    print("\nüìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤...")
    
    masters = CustomUser.objects.filter(role='master')
    operators = CustomUser.objects.filter(role='operator')
    
    orders_data = [
        {
            'client_name': '–ò–≤–∞–Ω –¢–µ—Å—Ç–æ–≤',
            'client_phone': '+7 (900) 123-45-67',
            'description': '–†–µ–º–æ–Ω—Ç —Å—Ç–∏—Ä–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã Samsung',
            'street': '—É–ª. –õ–µ–Ω–∏–Ω–∞',
            'house_number': '10',
            'apartment': '25',
            'service_type': '–†–µ–º–æ–Ω—Ç –±—ã—Ç–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–∏',
            'equipment_type': '–°—Ç–∏—Ä–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞',
            'estimated_cost': 3500.0,
            'status': '–Ω–æ–≤—ã–π'
        },
        {
            'client_name': '–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞',
            'client_phone': '+7 (900) 234-56-78',
            'description': '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Å—É–¥–æ–º–æ–µ—á–Ω–æ–π –º–∞—à–∏–Ω—ã',
            'street': '–ø—Ä. –ú–∏—Ä–∞',
            'house_number': '15',
            'apartment': '102',
            'service_type': '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Ö–Ω–∏–∫–∏',
            'equipment_type': '–ü–æ—Å—É–¥–æ–º–æ–µ—á–Ω–∞—è –º–∞—à–∏–Ω–∞',
            'estimated_cost': 2500.0,
            'status': '–Ω–æ–≤—ã–π'
        },
        {
            'client_name': '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –°–∏–¥–æ—Ä–æ–≤',
            'client_phone': '+7 (900) 345-67-89',
            'description': '–†–µ–º–æ–Ω—Ç —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞ LG',
            'street': '—É–ª. –ì–∞–≥–∞—Ä–∏–Ω–∞',
            'house_number': '22',
            'apartment': '5',
            'service_type': '–†–µ–º–æ–Ω—Ç –±—ã—Ç–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–∏',
            'equipment_type': '–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫',
            'estimated_cost': 4200.0,
            'status': '–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ'
        },
        {
            'client_name': '–ï–ª–µ–Ω–∞ –ö–æ–∑–ª–æ–≤–∞',
            'client_phone': '+7 (900) 456-78-90',
            'description': '–ß–∏—Å—Ç–∫–∞ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–∞',
            'street': '—É–ª. –ü—É—à–∫–∏–Ω–∞',
            'house_number': '8',
            'apartment': '33',
            'service_type': '–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏',
            'equipment_type': '–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä',
            'estimated_cost': 1800.0,
            'status': '–Ω–æ–≤—ã–π'
        },
        {
            'client_name': '–î–º–∏—Ç—Ä–∏–π –í–æ–ª–∫–æ–≤',
            'client_phone': '+7 (900) 567-89-01',
            'description': '–ó–∞–º–µ–Ω–∞ –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞ –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ',
            'street': '—É–ª. –°–æ–≤–µ—Ç—Å–∫–∞—è',
            'house_number': '45',
            'apartment': '12',
            'service_type': '–†–µ–º–æ–Ω—Ç –±—ã—Ç–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–∏',
            'equipment_type': '–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫',
            'estimated_cost': 6500.0,
            'status': '–Ω–∞–∑–Ω–∞—á–µ–Ω'
        },
        {
            'client_name': '–ê–Ω–Ω–∞ –ú–æ—Ä–æ–∑–æ–≤–∞',
            'client_phone': '+7 (900) 678-90-12',
            'description': '–†–µ–º–æ–Ω—Ç –º–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∏',
            'street': '—É–ª. –ú–æ–ª–æ–¥–µ–∂–Ω–∞—è',
            'house_number': '17',
            'apartment': '8',
            'service_type': '–†–µ–º–æ–Ω—Ç –±—ã—Ç–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–∏',
            'equipment_type': '–ú–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∞—è –ø–µ—á—å',
            'estimated_cost': 2200.0,
            'status': '–≤ —Ä–∞–±–æ—Ç–µ'
        }
    ]
    
    created_orders = []
    for i, order_data in enumerate(orders_data):
        # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        if i < 4 and operators.exists():
            order_data['operator'] = operators[i % operators.count()]
        
        # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        if order_data['status'] in ['–Ω–∞–∑–Ω–∞—á–µ–Ω', '–≤ —Ä–∞–±–æ—Ç–µ'] and masters.exists():
            order_data['assigned_master'] = masters[i % masters.count()]
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –≤ —Ä–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è
        created_at = timezone.now() - timedelta(hours=i*2, minutes=i*15)
        
        order = Order.objects.create(**order_data)
        order.created_at = created_at
        order.save()
        
        created_orders.append(order)
        
        master_info = f" ‚Üí {order.assigned_master.first_name} {order.assigned_master.last_name}" if order.assigned_master else ""
        operator_info = f" (–û–ø–µ—Ä–∞—Ç–æ—Ä: {order.operator.first_name})" if order.operator else ""
        
        print(f"‚úÖ –ó–∞–∫–∞–∑ #{order.id}: {order.client_name} - {order.status}{master_info}{operator_info}")
    
    print(f"\nüéâ –°–æ–∑–¥–∞–Ω–æ {len(created_orders)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
    
    # –í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏ –ø–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
    print("\n" + "="*60)
    print("üìä –°–í–û–î–ö–ê –ü–û –°–û–ó–î–ê–ù–ù–´–ú –î–ê–ù–ù–´–ú")
    print("="*60)
    
    print(f"\nüë∑‚Äç‚ôÇÔ∏è –ú–ê–°–¢–ï–†–ê ({masters.count()}):")
    for master in masters:
        token = Token.objects.get(user=master).key
        assigned_orders = Order.objects.filter(assigned_master=master).count()
        print(f"  ‚Ä¢ {master.first_name} {master.last_name} ({master.email})")
        print(f"    Token: {token}")
        print(f"    –ù–∞–∑–Ω–∞—á–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {assigned_orders}")
    
    print(f"\nüìû –û–ü–ï–†–ê–¢–û–†–´ ({operators.count()}):")
    for operator in operators:
        token = Token.objects.get(user=operator).key
        handled_orders = Order.objects.filter(operator=operator).count()
        print(f"  ‚Ä¢ {operator.first_name} {operator.last_name} ({operator.email})")
        print(f"    Token: {token}")
        print(f"    –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {handled_orders}")
    
    curators = CustomUser.objects.filter(role='curator')
    print(f"\nüë®‚Äçüíº –ö–£–†–ê–¢–û–†–´ ({curators.count()}):")
    for curator in curators:
        token = Token.objects.get(user=curator).key
        print(f"  ‚Ä¢ {curator.first_name} {curator.last_name} ({curator.email})")
        print(f"    Token: {token}")
    
    print(f"\nüìã –ó–ê–ö–ê–ó–´ –ü–û –°–¢–ê–¢–£–°–ê–ú:")
    statuses = Order.objects.values_list('status', flat=True).distinct()
    for status in statuses:
        count = Order.objects.filter(status=status).count()
        print(f"  ‚Ä¢ {status}: {count} –∑–∞–∫–∞–∑–æ–≤")
    
    print(f"\nüîë –°–£–ü–ï–†-–ê–î–ú–ò–ù:")
    superadmin = CustomUser.objects.filter(role='super-admin').first()
    if superadmin:
        token = Token.objects.get(user=superadmin).key
        print(f"  ‚Ä¢ {superadmin.email}")
        print(f"    Token: {token}")
    
    print("\n" + "="*60)
    print("‚úÖ –í–°–ï –¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï –°–û–ó–î–ê–ù–´ –£–°–ü–ï–®–ù–û!")
    print("="*60)
    
    return {
        'masters': list(masters),
        'operators': list(operators),
        'curators': list(curators),
        'orders': created_orders
    }

if __name__ == "__main__":
    create_test_data()
