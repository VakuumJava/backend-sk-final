#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π —Å —Ä–∞–∑–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Å–∏—Å—Ç–µ–º–∞ –≥–ª–∞–∑–∞–º–∏ –º–∞—Å—Ç–µ—Ä–∞, –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –∫—É—Ä–∞—Ç–æ—Ä–∞ –∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
"""
import requests
import json
from datetime import datetime

# –ë–∞–∑–æ–≤—ã–π URL API
BASE_URL = "http://127.0.0.1:8000"

# –¢–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞)
TOKENS = {
    'super_admin': '327c2446fa3e569456c220b7b7cbdb9bcc4ff620',
    'master1': 'ba187bce15be8dd8db2ebed3aa98f950bdd23003',
    'master2': '91fb1989349a1ff8995cc6f4232c45bd06bcea8d',
    'master3': 'ccaaf92df6f43b9379c52c1cefc1fb2acaa0dc7d',
    'master4': '3eb3ec727439f6cb3700d9c89192e9f6c4fbd008',
    'operator1': '8b5ae72b7fa6c69db664dd383f1ef7dad8540b08',
    'operator2': '7036ecdb28db85503159ff0c09be02483d0b998a',
    'curator1': '8b709c0c68b90ff206c2e4ce2321a9d7f4749df8'
}

def make_request(endpoint, token, method='GET', data=None):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º"""
    headers = {
        'Authorization': f'Token {token}',
        'Content-Type': 'application/json'
    }
    
    url = f"{BASE_URL}{endpoint}"
    
    try:
        if method == 'GET':
            response = requests.get(url, headers=headers)
        elif method == 'POST':
            response = requests.post(url, headers=headers, json=data)
        elif method == 'PUT':
            response = requests.put(url, headers=headers, json=data)
        elif method == 'DELETE':
            response = requests.delete(url, headers=headers)
        
        if response.status_code == 200:
            return response.json()
        else:
            return {
                'error': f'Status {response.status_code}',
                'message': response.text[:200] if response.text else 'No message'
            }
    except Exception as e:
        return {'error': str(e)}

def print_section(title):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏"""
    print("\n" + "="*80)
    print(f"üéØ {title}")
    print("="*80)

def print_user_info(token, role):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    user_info = make_request('/api/user/', token)
    if 'error' not in user_info:
        print(f"üë§ –í—Ö–æ–¥ –∫–∞–∫: {user_info.get('email')} ({role})")
        print(f"   ID: {user_info.get('id')}, –†–æ–ª—å: {user_info.get('role')}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_info}")

def demonstrate_super_admin():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞"""
    print_section("–°–£–ü–ï–†-–ê–î–ú–ò–ù - –ü–æ–ª–Ω—ã–π –æ–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã")
    token = TOKENS['super_admin']
    print_user_info(token, "–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
    print("\nüìã –í–°–ï –ó–ê–ö–ê–ó–´ –í –°–ò–°–¢–ï–ú–ï:")
    orders = make_request('/api/orders/all/', token)
    if 'error' not in orders:
        for order in orders:
            status = order.get('status', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            master = order.get('assigned_master')
            master_info = f" ‚Üí –ú–∞—Å—Ç–µ—Ä: {master}" if master else " (–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω)"
            print(f"  ‚Ä¢ –ó–∞–∫–∞–∑ #{order.get('id')}: {order.get('client_name')} - {status}{master_info}")
    else:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {orders}")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Å—Ç–µ—Ä–∞—Ö
    print("\nüë∑‚Äç‚ôÇÔ∏è –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ú–ê–°–¢–ï–†–ê–•:")
    masters = make_request('/users/masters/', token)
    if 'error' not in masters:
        for master in masters:
            print(f"  ‚Ä¢ {master.get('first_name', '')} {master.get('last_name', '')} ({master.get('email')})")
    else:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {masters}")
    
    # –ù–∞–≥—Ä—É–∑–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤
    print("\nüìä –ù–ê–ì–†–£–ó–ö–ê –ú–ê–°–¢–ï–†–û–í:")
    workload = make_request('/api/masters/workload/all/', token)
    if 'error' not in workload:
        for master_data in workload:
            email = master_data.get('master_email', 'Unknown')
            orders_today = master_data.get('total_orders_today', 0)
            next_slot = master_data.get('next_available_slot')
            slot_info = f" (—Å–ª–µ–¥—É—é—â–∏–π —Å–ª–æ—Ç: {next_slot})" if next_slot else " (–Ω–µ—Ç —Å–ª–æ—Ç–æ–≤)"
            print(f"  ‚Ä¢ {email}: {orders_today} –∑–∞–∫–∞–∑–æ–≤ —Å–µ–≥–æ–¥–Ω—è{slot_info}")
    else:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {workload}")

def demonstrate_master(master_key):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –º–∞—Å—Ç–µ—Ä–∞"""
    print_section(f"–ú–ê–°–¢–ï–† - –†–∞–±–æ—Ç–∞ —Å –∑–∞–∫–∞–∑–∞–º–∏ ({master_key})")
    token = TOKENS[master_key]
    print_user_info(token, "–ú–∞—Å—Ç–µ—Ä")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞
    print("\nüìã –î–û–°–¢–£–ü–ù–´–ï –ó–ê–ö–ê–ó–´ –î–õ–Ø –í–ó–Ø–¢–ò–Ø:")
    available_orders = make_request('/api/orders/master/available/', token)
    if 'error' not in available_orders:
        if available_orders:
            for order in available_orders[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"  ‚Ä¢ –ó–∞–∫–∞–∑ #{order.get('id')}: {order.get('description')}")
                print(f"    –ê–¥—Ä–µ—Å: {order.get('public_address', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
                print(f"    –°—Ç–∞—Ç—É—Å: {order.get('status')}")
        else:
            print("  üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
    else:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {available_orders}")
    
    # –ú–æ–∏ –∑–∞–∫–∞–∑—ã
    print("\nüîß –ú–û–ò –¢–ï–ö–£–©–ò–ï –ó–ê–ö–ê–ó–´:")
    user_info = make_request('/api/user/', token)
    if 'error' not in user_info:
        master_id = user_info.get('id')
        my_orders = make_request(f'/orders/master/{master_id}/', token)
        if 'error' not in my_orders:
            if my_orders:
                for order in my_orders:
                    print(f"  ‚Ä¢ –ó–∞–∫–∞–∑ #{order.get('id')}: {order.get('client_name')}")
                    print(f"    –û–ø–∏—Å–∞–Ω–∏–µ: {order.get('description')}")
                    print(f"    –°—Ç–∞—Ç—É—Å: {order.get('status')}")
                    print(f"    –¢–µ–ª–µ—Ñ–æ–Ω: {order.get('client_phone', '—Å–∫—Ä—ã—Ç')}")
            else:
                print("  üì≠ –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
        else:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {my_orders}")

def demonstrate_operator(operator_key):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
    print_section(f"–û–ü–ï–†–ê–¢–û–† - –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤ ({operator_key})")
    token = TOKENS[operator_key]
    print_user_info(token, "–û–ø–µ—Ä–∞—Ç–æ—Ä")
    
    # –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    print("\nüìû –ù–û–í–´–ï –ó–ê–ö–ê–ó–´ –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò:")
    new_orders = make_request('/api/orders/new/', token)
    if 'error' not in new_orders:
        if new_orders:
            for order in new_orders:
                print(f"  ‚Ä¢ –ó–∞–∫–∞–∑ #{order.get('id')}: {order.get('client_name')}")
                print(f"    –¢–µ–ª–µ—Ñ–æ–Ω: {order.get('client_phone')}")
                print(f"    –û–ø–∏—Å–∞–Ω–∏–µ: {order.get('description')}")
                print(f"    –°–æ–∑–¥–∞–Ω: {order.get('created_at', '')[:19]}")
        else:
            print("  ‚úÖ –í—Å–µ –∑–∞–∫–∞–∑—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
    else:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {new_orders}")
    
    # –ó–∞–∫–∞–∑—ã –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ
    print("\n‚è≥ –ó–ê–ö–ê–ó–´ –í –û–ë–†–ê–ë–û–¢–ö–ï:")
    processing_orders = make_request('/get_processing_orders', token)
    if 'error' not in processing_orders:
        if processing_orders:
            for order in processing_orders:
                print(f"  ‚Ä¢ –ó–∞–∫–∞–∑ #{order.get('id')}: {order.get('client_name')} - {order.get('status')}")
        else:
            print("  üì≠ –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
    else:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {processing_orders}")

def demonstrate_curator():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∫—É—Ä–∞—Ç–æ—Ä–∞"""
    print_section("–ö–£–†–ê–¢–û–† - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞–º–∏ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞")
    token = TOKENS['curator1']
    print_user_info(token, "–ö—É—Ä–∞—Ç–æ—Ä")
    
    # –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    print("\nüìã –ê–ö–¢–ò–í–ù–´–ï –ó–ê–ö–ê–ó–´:")
    active_orders = make_request('/api/orders/active/', token)
    if 'error' not in active_orders:
        if active_orders:
            for order in active_orders:
                master = order.get('assigned_master')
                master_info = f" (–ú–∞—Å—Ç–µ—Ä: {master})" if master else " (–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω)"
                print(f"  ‚Ä¢ –ó–∞–∫–∞–∑ #{order.get('id')}: {order.get('client_name')} - {order.get('status')}{master_info}")
        else:
            print("  üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
    else:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {active_orders}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤
    print("\nüë∑‚Äç‚ôÇÔ∏è –ú–ê–°–¢–ï–†–ê –ü–û–î –£–ü–†–ê–í–õ–ï–ù–ò–ï–ú:")
    masters = make_request('/users/masters/', token)
    if 'error' not in masters:
        for master in masters:
            print(f"  ‚Ä¢ {master.get('first_name', '')} {master.get('last_name', '')} ({master.get('email')})")
            print(f"    –†–æ–ª—å: {master.get('role')}, –î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–∫–∞: {master.get('dist', 0)}")
    else:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {masters}")

def create_test_order():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –æ—Ç –∏–º–µ–Ω–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
    print_section("–°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –ó–ê–ö–ê–ó–ê")
    token = TOKENS['operator1']
    
    order_data = {
        "client_name": "–¢–µ—Å—Ç –ö–ª–∏–µ–Ω—Ç–æ–≤",
        "client_phone": "+7 (900) 111-22-33", 
        "description": "–†–µ–º–æ–Ω—Ç —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–∞ Samsung - –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è",
        "street": "—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è",
        "house_number": "42",
        "apartment": "15",
        "service_type": "–†–µ–º–æ–Ω—Ç —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏",
        "equipment_type": "–¢–µ–ª–µ–≤–∏–∑–æ—Ä"
    }
    
    print(f"üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:")
    print(f"   –ö–ª–∏–µ–Ω—Ç: {order_data['client_name']}")
    print(f"   –¢–µ–ª–µ—Ñ–æ–Ω: {order_data['client_phone']}")
    print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {order_data['description']}")
    
    result = make_request('/orders/create/', token, 'POST', order_data)
    if 'error' not in result:
        print(f"‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! ID: {result.get('id')}")
        print(f"   –°—Ç–∞—Ç—É—Å: {result.get('status')}")
        print(f"   –ê–¥—Ä–µ—Å: {result.get('full_address')}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {result}")

def demonstrate_order_assignment():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –º–∞—Å—Ç–µ—Ä—É"""
    print_section("–ù–ê–ó–ù–ê–ß–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê –ú–ê–°–¢–ï–†–£")
    token = TOKENS['super_admin']
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    new_orders = make_request('/api/orders/new/', token)
    if 'error' not in new_orders and new_orders:
        order_id = new_orders[0]['id']
        print(f"üìã –ù–∞–∑–Ω–∞—á–∞–µ–º –∑–∞–∫–∞–∑ #{order_id} –º–∞—Å—Ç–µ—Ä—É –°–µ—Ä–≥–µ—é –°–∏–¥–æ—Ä–æ–≤—É")
        
        # –ü–æ–ª—É—á–∞–µ–º ID –º–∞—Å—Ç–µ—Ä–∞
        masters = make_request('/users/masters/', token)
        sergey_master = None
        for master in masters:
            if master.get('email') == 'master3@test.com':
                sergey_master = master
                break
        
        if sergey_master:
            # –ù–∞–∑–Ω–∞—á–∞–µ–º –∑–∞–∫–∞–∑
            assign_data = {"master_id": sergey_master['id']}
            result = make_request(f'/assign/{order_id}/', token, 'POST', assign_data)
            if 'error' not in result:
                print(f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –º–∞—Å—Ç–µ—Ä—É {sergey_master['first_name']} {sergey_master['last_name']}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {result}")
        else:
            print("‚ùå –ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
    else:
        print("üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üöÄ" + "="*79)
    print("üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ê–ë–û–¢–´ –°–ò–°–¢–ï–ú–´ –° –†–ê–ó–ù–´–• –ê–ö–ö–ê–£–ù–¢–û–í")
    print("üöÄ" + "="*79)
    print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # 1. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
    create_test_order()
    
    # 2. –†–∞–±–æ—Ç–∞ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
    demonstrate_super_admin()
    
    # 3. –†–∞–±–æ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    demonstrate_operator('operator1')
    demonstrate_operator('operator2')
    
    # 4. –†–∞–±–æ—Ç–∞ –º–∞—Å—Ç–µ—Ä–æ–≤
    demonstrate_master('master1')  # –£ –Ω–µ–≥–æ –µ—Å—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
    demonstrate_master('master3')  # –£ –Ω–µ–≥–æ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤
    
    # 5. –†–∞–±–æ—Ç–∞ –∫—É—Ä–∞—Ç–æ—Ä–∞
    demonstrate_curator()
    
    # 6. –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    demonstrate_order_assignment()
    
    # 7. –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –æ–±–∑–æ—Ä –º–∞—Å—Ç–µ—Ä–∞ –ø–æ—Å–ª–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    print_section("–ú–ê–°–¢–ï–† –ü–û–°–õ–ï –ù–ê–ó–ù–ê–ß–ï–ù–ò–Ø –ó–ê–ö–ê–ó–ê")
    demonstrate_master('master3')
    
    print("\n" + "üéâ"*80)
    print("‚úÖ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
    print("üéâ"*80)

if __name__ == "__main__":
    main()
