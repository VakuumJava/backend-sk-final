#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ HTTP 403 –≤ capacity analysis
"""

import os
import sys
import django
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'app1.settings')
django.setup()

from api1.models import CustomUser
from rest_framework.authtoken.models import Token

def test_capacity_api_access():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ API capacity analysis –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π"""
    
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è HTTP 403 –¥–ª—è capacity analysis...")
    
    base_url = 'http://127.0.0.1:8000'
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π
    roles_to_test = ['master', 'curator', 'super-admin', 'operator']
    
    for role in roles_to_test:
        print(f"\nüë§ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–æ–ª—å: {role}")
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            user = CustomUser.objects.get(email=f'{role}_test@example.com')
            print(f"   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user.email}")
        except CustomUser.DoesNotExist:
            user = CustomUser.objects.create_user(
                email=f'{role}_test@example.com',
                password='test123',
                role=role
            )
            print(f"   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {user.email}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
        token, created = Token.objects.get_or_create(user=user)
        headers = {
            'Authorization': f'Token {token.key}',
            'Content-Type': 'application/json'
        }
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º capacity analysis endpoint
        print("   üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º /api/capacity/analysis/...")
        try:
            response = requests.get(f'{base_url}/api/capacity/analysis/', headers=headers)
            if response.status_code == 200:
                print(f"   ‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω (200)")
                data = response.json()
                print(f"   üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: —Å–µ–≥–æ–¥–Ω—è {data['today']['date']}")
            elif response.status_code == 403:
                print(f"   ‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (403) - –û–®–ò–ë–ö–ê –ù–ï –ò–°–ü–†–ê–í–õ–ï–ù–ê!")
                return False
            else:
                print(f"   ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")
        except requests.exceptions.ConnectionError:
            print("   ‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º weekly forecast endpoint
        print("   üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º /api/capacity/weekly-forecast/...")
        try:
            response = requests.get(f'{base_url}/api/capacity/weekly-forecast/', headers=headers)
            if response.status_code == 200:
                print(f"   ‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω (200)")
                data = response.json()
                print(f"   üìà –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {len(data['week_forecast'])} –¥–Ω–µ–π")
            elif response.status_code == 403:
                print(f"   ‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (403) - –û–®–ò–ë–ö–ê –ù–ï –ò–°–ü–†–ê–í–õ–ï–ù–ê!")
                return False
            else:
                print(f"   ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")
        except requests.exceptions.ConnectionError:
            print("   ‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return False
    
    print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –û—à–∏–±–∫–∞ HTTP 403 –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    return True

if __name__ == '__main__':
    test_capacity_api_access()
