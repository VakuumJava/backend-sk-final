#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏:
IntegrityError: NOT NULL constraint failed: api1_orderlog.order_id

–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è profit_distribution —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
–ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –Ω–µ –≤—ã–¥–∞–µ—Ç –æ—à–∏–±–∫—É IntegrityError.
"""

import os
import django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'app1.settings')
django.setup()

from api1.models import *
from api1.views import log_system_action
from django.test import RequestFactory
from api1.views import profit_distribution
import json

def main():
    print('üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –û–®–ò–ë–ö–ò')
    print('=' * 50)
    print('–û—à–∏–±–∫–∞: IntegrityError: NOT NULL constraint failed: api1_orderlog.order_id')
    print('–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –î–æ–±–∞–≤–ª–µ–Ω–∞ –º–æ–¥–µ–ª—å SystemLog –∏ —Ñ—É–Ω–∫—Ü–∏—è log_system_action')
    print('=' * 50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–º–æ—â—å—é CustomUser
        user, created = CustomUser.objects.get_or_create(
            username='final_test_admin', 
            defaults={
                'email': 'final_test@admin.com', 
                'is_superuser': True, 
                'is_staff': True,
                'first_name': 'Final',
                'last_name': 'Test'
            }
        )
        print(f'‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username} ({user.email})')
        
        # –°–æ–∑–¥–∞–µ–º mock request
        factory = RequestFactory()
        
        # 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º GET –∑–∞–ø—Ä–æ—Å
        print('\nüìä 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GET –∑–∞–ø—Ä–æ—Å–∞...')
        request = factory.get('/api/profit-distribution/')
        request.user = user
        response = profit_distribution(request)
        print(f'   ‚úÖ GET —Å—Ç–∞—Ç—É—Å: {response.status_code}')
        
        if response.status_code == 200:
            data = json.loads(response.content)
            total = (data.get('master_paid_percentage', 0) + 
                    data.get('master_balance_percentage', 0) + 
                    data.get('curator_percentage', 0) + 
                    data.get('company_percentage', 0))
            print(f'   üìä –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:')
            print(f'      ‚Ä¢ –ú–∞—Å—Ç–µ—Ä—É (–≤—ã–ø–ª–∞—á–µ–Ω–æ): {data.get("master_paid_percentage")}%')
            print(f'      ‚Ä¢ –ú–∞—Å—Ç–µ—Ä—É (–±–∞–ª–∞–Ω—Å): {data.get("master_balance_percentage")}%')
            print(f'      ‚Ä¢ –ö—É—Ä–∞—Ç–æ—Ä—É: {data.get("curator_percentage")}%')
            print(f'      ‚Ä¢ –ö–æ–º–ø–∞–Ω–∏–∏: {data.get("company_percentage")}%')
            print(f'   ‚úÖ –û–±—â–∞—è —Å—É–º–º–∞: {total}% (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 100%)')
        
        # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º POST –∑–∞–ø—Ä–æ—Å —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        print('\nüìù 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ POST –∑–∞–ø—Ä–æ—Å–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫)...')
        test_data = {
            'master_paid_percentage': 40,
            'master_balance_percentage': 20,
            'curator_percentage': 15,
            'company_percentage': 25
        }
        
        request = factory.post('/api/profit-distribution/', 
                              data=json.dumps(test_data), 
                              content_type='application/json')
        request.user = user
        
        initial_log_count = SystemLog.objects.count()
        print(f'   üìä –õ–æ–≥–æ–≤ –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {initial_log_count}')
        
        response = profit_distribution(request)
        print(f'   ‚úÖ POST —Å—Ç–∞—Ç—É—Å: {response.status_code}')
        
        if response.status_code == 200:
            data = json.loads(response.content)
            print(f'   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!')
            print(f'   üìÑ –û—Ç–≤–µ—Ç: {data.get("message", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")}')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–æ–≥–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è
            final_log_count = SystemLog.objects.count()
            print(f'   üìä –õ–æ–≥–æ–≤ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {final_log_count}')
            
            if final_log_count > initial_log_count:
                print('   ‚úÖ –ù–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ª–æ–≥ —Å–æ–∑–¥–∞–Ω!')
                last_log = SystemLog.objects.filter(action='percentage_settings_updated').last()
                if last_log:
                    print(f'      üìù –û–ø–∏—Å–∞–Ω–∏–µ: {last_log.description[:80]}...')
                    print(f'      üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {last_log.performed_by}')
                    print(f'      üìÖ –í—Ä–µ–º—è: {last_log.created_at.strftime("%Y-%m-%d %H:%M:%S")}')
            else:
                print('   ‚ö†Ô∏è –ù–æ–≤—ã–π –ª–æ–≥ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å)')
        else:
            print(f'   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è - —Å—Ç–∞—Ç—É—Å: {response.status_code}')
            print(f'   üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞: {response.content.decode()}')
        
        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º POST –∑–∞–ø—Ä–æ—Å —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        print('\nüö´ 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ POST –∑–∞–ø—Ä–æ—Å–∞ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...')
        invalid_data = {
            'master_paid_percentage': 50,
            'master_balance_percentage': 30,
            'curator_percentage': 15,
            'company_percentage': 25  # –°—É–º–º–∞: 120% (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 100%)
        }
        
        request = factory.post('/api/profit-distribution/', 
                              data=json.dumps(invalid_data), 
                              content_type='application/json')
        request.user = user
        
        response = profit_distribution(request)
        print(f'   ‚úÖ POST —Å—Ç–∞—Ç—É—Å: {response.status_code}')
        
        if response.status_code == 400:
            data = json.loads(response.content)
            print(f'   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!')
            print(f'   üìÑ –û—à–∏–±–∫–∏: {data.get("errors", [])}')
        else:
            print(f'   ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç - —Å—Ç–∞—Ç—É—Å: {response.status_code}')
        
        # 4. –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print('\nüìä 4. –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞...')
        total_logs = SystemLog.objects.count()
        recent_logs = SystemLog.objects.filter(action='percentage_settings_updated').order_by('-created_at')[:3]
        
        print(f'   üìä –í—Å–µ–≥–æ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤: {total_logs}')
        print(f'   üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏:')
        
        for i, log in enumerate(recent_logs, 1):
            print(f'      {i}. {log.performed_by} - {log.created_at.strftime("%Y-%m-%d %H:%M")}')
            print(f'         {log.description[:60]}...')
        
        print('\n' + '=' * 50)
        print('üéâ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!')
        print('‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ IntegrityError –ò–°–ü–†–ê–í–õ–ï–ù–ê!')
        print('‚úÖ –§—É–Ω–∫—Ü–∏—è profit_distribution —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!')
        print('‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫!')
        print('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç!')
        print('=' * 50)
        
    except Exception as e:
        print(f'\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}')
        import traceback
        traceback.print_exc()
        print('\nüí° –ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç—É –æ—à–∏–±–∫—É, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!')
        return False
    
    return True

if __name__ == '__main__':
    success = main()
    if success:
        print('\nüöÄ –ì–æ—Ç–æ–≤–æ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é –≤ –ø—Ä–æ–¥–∞–∫—à–Ω!')
    else:
        print('\nüîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞.')
