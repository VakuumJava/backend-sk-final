#!/usr/bin/env python3
"""
–¢–µ—Å—Ç API –∑–∞–∫–∞–∑–æ–≤ –º–∞—Å—Ç–µ—Ä–∞
"""
import requests

# –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
BASE_URL = "http://localhost:8000"
TOKEN = "ee57c0206252baeceafcef56d7e32e78ec6e7d3f"
USER_ID = 3

def test_master_orders():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞"""
    headers = {
        'Authorization': f'Token {TOKEN}',
        'Content-Type': 'application/json'
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –∑–∞–∫–∞–∑–æ–≤
    endpoints_to_test = [
        "/api/orders/master/available/",
        "/api/orders/new/",
        "/api/orders/all/",
        f"/api/distance/master/{USER_ID}/",
        "/api/distance/orders/available/",
    ]
    
    for endpoint in endpoints_to_test:
        url = f"{BASE_URL}{endpoint}"
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º: {endpoint}")
        
        try:
            response = requests.get(url, headers=headers)
            print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                if isinstance(data, list):
                    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π")
                    if data:
                        print(f"–ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏: {list(data[0].keys()) if data[0] else '–ü—É—Å—Ç–∞—è –∑–∞–ø–∏—Å—å'}")
                elif isinstance(data, dict):
                    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ–±—ä–µ–∫—Ç —Å –∫–ª—é—á–∞–º–∏: {list(data.keys())}")
                else:
                    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {type(data)}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")

def test_assign_order():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –º–∞—Å—Ç–µ—Ä—É"""
    headers = {
        'Authorization': f'Token {TOKEN}',
        'Content-Type': 'application/json'
    }
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    try:
        response = requests.get(f"{BASE_URL}/api/orders/new/", headers=headers)
        if response.status_code == 200:
            orders = response.json()
            if orders:
                order_id = orders[0]['id']
                print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #{order_id}")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
                assign_url = f"{BASE_URL}/api/orders/{order_id}/assign-with-check/"
                assign_response = requests.post(assign_url, headers=headers, json={"master_id": USER_ID})
                
                print(f"–°—Ç–∞—Ç—É—Å: {assign_response.status_code}")
                print(f"–û—Ç–≤–µ—Ç: {assign_response.text}")
            else:
                print("\n‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")
        else:
            print(f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã: {response.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {e}")

if __name__ == "__main__":
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –º–∞—Å—Ç–µ—Ä–∞ ===")
    print(f"–ú–∞—Å—Ç–µ—Ä: ID {USER_ID}, Token: {TOKEN[:20]}...")
    
    test_master_orders()
    test_assign_order()
