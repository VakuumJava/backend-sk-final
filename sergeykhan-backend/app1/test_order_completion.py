#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤.
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ —á–µ—Ä–µ–∑ API.
"""
import os
import sys
import django
import random
import json
import requests
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'app1.settings')
django.setup()

from api1.models import CustomUser, Order, OrderCompletion
from rest_framework.authtoken.models import Token

# URL –±–∞–∑–æ–≤–æ–≥–æ API
BASE_URL = "http://localhost:8000/api"

def get_token(email):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user = CustomUser.objects.get(email=email)
        token, _ = Token.objects.get_or_create(user=user)
        return token.key
    except CustomUser.DoesNotExist:
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email {email} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None

def test_order_completion():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤"""
    print("\nüöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤...\n")
    
    # 1. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã
    master_token = get_token("master1@test.com")
    curator_token = get_token("curator1@test.com")
    
    if not master_token or not curator_token:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return
    
    # 2. –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –º–∞—Å—Ç–µ—Ä–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ "–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"
    try:
        master_user = CustomUser.objects.get(email="master1@test.com")
        order = Order.objects.filter(
            assigned_master=master_user, 
            status="–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è",
            is_test=True
        ).first()
        
        if not order:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–∫–∞–∑–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ "–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è", –ø–æ–ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –≤ —Å—Ç–∞—Ç—É—Å–µ "–Ω–∞–∑–Ω–∞—á–µ–Ω"
            order = Order.objects.filter(
                assigned_master=master_user, 
                status="–Ω–∞–∑–Ω–∞—á–µ–Ω",
                is_test=True
            ).first()
            
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏, –æ–±–Ω–æ–≤–∏–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"
            if order:
                order.status = "–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"
                order.save()
                print(f"‚úÖ –ó–∞–∫–∞–∑ #{order.id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å '–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è'")
            else:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ master1@test.com")
                return
    except CustomUser.DoesNotExist:
        print("‚ùå –ú–∞—Å—Ç–µ—Ä master1@test.com –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    print(f"üîç –í—ã–±—Ä–∞–Ω –∑–∞–∫–∞–∑ #{order.id} –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
    
    # 3. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –º–∞—Å—Ç–µ—Ä–æ–º
    completion_data = {
        "order_id": order.id,
        "work_description": "–û—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–ª —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –∑–∞–º–µ–Ω–∏–ª –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω—ã–µ –¥–µ—Ç–∞–ª–∏",
        "parts_expenses": 1500,
        "transport_costs": 500,
        "total_received": 5000,
        "completion_date": datetime.now().strftime("%Y-%m-%d")
    }
    
    print("\nüîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –º–∞—Å—Ç–µ—Ä–æ–º...")
    print(f"üìã –î–∞–Ω–Ω—ã–µ: {json.dumps(completion_data, indent=2, ensure_ascii=False)}")
    
    # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    print("\n‚úÖ [–ò–º–∏—Ç–∞—Ü–∏—è] –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π.")
    print(f"‚úÖ [–ò–º–∏—Ç–∞—Ü–∏—è] –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '–æ–∂–∏–¥–∞–µ—Ç_–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'")
    
    # 4. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫—É—Ä–∞—Ç–æ—Ä–æ–º
    confirmation_data = {
        "order_id": order.id,
        "status": "approved",
        "curator_notes": "–†–∞–±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ"
    }
    
    print("\nüîÑ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∫—É—Ä–∞—Ç–æ—Ä–æ–º...")
    print(f"üìã –î–∞–Ω–Ω—ã–µ: {json.dumps(confirmation_data, indent=2, ensure_ascii=False)}")
    
    # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    print("\n‚úÖ [–ò–º–∏—Ç–∞—Ü–∏—è] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∫—É—Ä–∞—Ç–æ—Ä–æ–º.")
    print(f"‚úÖ [–ò–º–∏—Ç–∞—Ü–∏—è] –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '–∑–∞–≤–µ—Ä—à–µ–Ω'")
    
    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ API (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
    should_test_real_api = input("\n‚ùì –•–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç API? (y/n): ").lower() == "y"
    
    if should_test_real_api:
        # –†–µ–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –º–∞—Å—Ç–µ—Ä–æ–º
        try:
            headers = {"Authorization": f"Token {master_token}"}
            complete_url = f"{BASE_URL}/complete-order/"
            
            response = requests.post(complete_url, json=completion_data, headers=headers)
            
            if response.status_code == 200:
                print("\n‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π.")
                print(f"üìã –û—Ç–≤–µ—Ç API: {json.dumps(response.json(), indent=2, ensure_ascii=False)}")
                
                # –†–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫—É—Ä–∞—Ç–æ—Ä–æ–º
                headers = {"Authorization": f"Token {curator_token}"}
                confirm_url = f"{BASE_URL}/confirm-completion/"
                
                response = requests.post(confirm_url, json=confirmation_data, headers=headers)
                
                if response.status_code == 200:
                    print("\n‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∫—É—Ä–∞—Ç–æ—Ä–æ–º.")
                    print(f"üìã –û—Ç–≤–µ—Ç API: {json.dumps(response.json(), indent=2, ensure_ascii=False)}")
                else:
                    print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {response.status_code}")
                    print(f"üìã –û—Ç–≤–µ—Ç API: {response.text}")
            else:
                print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {response.status_code}")
                print(f"üìã –û—Ç–≤–µ—Ç API: {response.text}")
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ API –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

if __name__ == "__main__":
    test_order_completion()
