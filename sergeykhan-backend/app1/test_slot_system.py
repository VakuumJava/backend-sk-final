#!/usr/bin/env python
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Å–ª–æ—Ç–æ–≤ –∑–∞–∫–∞–∑–æ–≤
"""

import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'app1.settings')
sys.path.append('/Users/bekzhan/Documents/projects/sk/SergeyKhanWeb/sergeykhan-backend/app1')
django.setup()

from api1.models import CustomUser, Order, OrderSlot, MasterDailySchedule
from datetime import date, datetime, time, timedelta
import json


def test_slot_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å–ª–æ—Ç–æ–≤"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å–ª–æ—Ç–æ–≤ –∑–∞–∫–∞–∑–æ–≤")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
    try:
        master = CustomUser.objects.get(email='master@test.com')
        print(f"‚úÖ –ú–∞—Å—Ç–µ—Ä –Ω–∞–π–¥–µ–Ω: {master.email} (ID: {master.id})")
    except CustomUser.DoesNotExist:
        print("‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    today = date.today()
    daily_schedule = MasterDailySchedule.get_or_create_for_master_date(master, today)
    print(f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–Ω—è —Å–æ–∑–¥–∞–Ω–æ: {daily_schedule}")
    print(f"   üìÖ –î–∞—Ç–∞: {today}")
    print(f"   ‚è∞ –†–∞–±–æ—á–∏–µ —á–∞—Å—ã: {daily_schedule.work_start_time} - {daily_schedule.work_end_time}")
    print(f"   üìä –ú–∞–∫—Å–∏–º—É–º —Å–ª–æ—Ç–æ–≤: {daily_schedule.max_slots}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã –¥–Ω—è
    print(f"\nüìã –í—Å–µ —Å–ª–æ—Ç—ã –¥–Ω—è:")
    slots = daily_schedule.get_all_slots()
    for slot in slots:
        status_icon = "üî¥" if slot['is_occupied'] else "üü¢"
        order_info = f" (–ó–∞–∫–∞–∑ #{slot['order'].id})" if slot['order'] else " (—Å–≤–æ–±–æ–¥–µ–Ω)"
        print(f"   {status_icon} –°–ª–æ—Ç {slot['slot_number']}: {slot['time']} - {slot['end_time']}{order_info}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
    available_slots = OrderSlot.get_available_slots_for_master(master, today)
    print(f"\nüÜì –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã: {available_slots}")
    print(f"üî¢ –°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {len(available_slots)}")
    print(f"üî¢ –ó–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤: {daily_schedule.get_occupied_slots_count()}")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑
    print(f"\nüîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞...")
    test_order = Order.objects.create(
        client_name='–¢–µ—Å—Ç –°–ª–æ—Ç –ö–ª–∏–µ–Ω—Ç',
        client_phone='+996700123456',
        description='–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã —Å–ª–æ—Ç–æ–≤',
        address='–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å',
        is_test=True
    )
    print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω: ID = {test_order.id}")
    
    # –ù–∞–∑–Ω–∞—á–∞–µ–º –∑–∞–∫–∞–∑ –Ω–∞ –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–ª–æ—Ç
    if available_slots:
        slot_number = available_slots[0]
        print(f"\nüéØ –ù–∞–∑–Ω–∞—á–∞–µ–º –∑–∞–∫–∞–∑ #{test_order.id} –Ω–∞ —Å–ª–æ—Ç {slot_number}...")
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Å–ª–æ—Ç–∞
        start_datetime = datetime.combine(today, daily_schedule.work_start_time)
        slot_datetime = start_datetime + (daily_schedule.slot_duration * (slot_number - 1))
        slot_time = slot_datetime.time()
        
        try:
            order_slot = OrderSlot.create_slot_for_order(
                order=test_order,
                master=master,
                slot_date=today,
                slot_number=slot_number,
                slot_time=slot_time
            )
            print(f"‚úÖ –°–ª–æ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"   üìç –°–ª–æ—Ç: {order_slot.get_slot_display_name()}")
            print(f"   ‚è∞ –í—Ä–µ–º—è: {order_slot.slot_time} - {order_slot.get_end_time()}")
            print(f"   üìã –°—Ç–∞—Ç—É—Å: {order_slot.status}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            print(f"\nüìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
            updated_slots = daily_schedule.get_all_slots()
            for slot in updated_slots:
                if slot['slot_number'] == slot_number:
                    print(f"   üî¥ –°–ª–æ—Ç {slot['slot_number']}: {slot['time']} - {slot['end_time']} (–ó–∞–∫–∞–∑ #{slot['order'].id})")
                    break
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
            print(f"\nüìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:")
            print(f"   üÜî ID: {test_order.id}")
            print(f"   üë§ –ö–ª–∏–µ–Ω—Ç: {test_order.client_name}")
            print(f"   üìû –¢–µ–ª–µ—Ñ–æ–Ω: {test_order.client_phone}")
            print(f"   üìç –ê–¥—Ä–µ—Å: {test_order.address}")
            print(f"   üìã –°—Ç–∞—Ç—É—Å: {test_order.status}")
            print(f"   üë®‚Äçüîß –ú–∞—Å—Ç–µ—Ä: {test_order.assigned_master.email if test_order.assigned_master else '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}")
            print(f"   üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞: {test_order.scheduled_date}")
            print(f"   ‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {test_order.scheduled_time}")
            
            if hasattr(test_order, 'slot'):
                print(f"   üéØ –°–ª–æ—Ç: {test_order.slot.get_slot_display_name()}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ª–æ—Ç–∞: {e}")
            
    else:
        print("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüìà –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    final_available = OrderSlot.get_available_slots_for_master(master, today)
    print(f"   üÜì –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {len(final_available)}")
    print(f"   üî¥ –ó–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤: {daily_schedule.get_occupied_slots_count()}")
    print(f"   üìä –ó–∞–≥—Ä—É–∑–∫–∞: {daily_schedule.get_occupied_slots_count()}/{daily_schedule.max_slots}")
    
    print(f"\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


def test_api_endpoints():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints —á–µ—Ä–µ–∑ curl –∫–æ–º–∞–Ω–¥—ã"""
    print("\nüåê –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API:")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –º–∞—Å—Ç–µ—Ä–∞
    print("1. –õ–æ–≥–∏–Ω –º–∞—Å—Ç–µ—Ä–∞:")
    print('curl -X POST http://127.0.0.1:8000/login/ \\')
    print('  -H "Content-Type: application/json" \\')
    print('  -d \'{"email": "master@test.com", "password": "test123456"}\'')
    
    print("\n2. –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:")
    print('curl -X GET http://127.0.0.1:8000/api/slots/master/1/schedule/ \\')
    print('  -H "Authorization: Token YOUR_TOKEN_HERE"')
    
    print("\n3. –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –º–∞—Å—Ç–µ—Ä–∞:")
    print('curl -X GET http://127.0.0.1:8000/api/slots/master/1/available/ \\')
    print('  -H "Authorization: Token YOUR_TOKEN_HERE"')
    
    print("\n4. –ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ —Å–ª–æ—Ç:")
    print('curl -X POST http://127.0.0.1:8000/api/slots/assign/ \\')
    print('  -H "Authorization: Token YOUR_TOKEN_HERE" \\')
    print('  -H "Content-Type: application/json" \\')
    print('  -d \'{"order_id": ORDER_ID, "master_id": 1, "slot_date": "2025-06-18", "slot_number": 1}\'')
    
    print("\n5. –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ—Ç–µ –∑–∞–∫–∞–∑–∞:")
    print('curl -X GET http://127.0.0.1:8000/api/slots/order/ORDER_ID/ \\')
    print('  -H "Authorization: Token YOUR_TOKEN_HERE"')
    
    print("\n6. –°–≤–æ–¥–∫–∞ –ø–æ –≤—Å–µ–º –º–∞—Å—Ç–µ—Ä–∞–º:")
    print('curl -X GET http://127.0.0.1:8000/api/slots/masters/summary/ \\')
    print('  -H "Authorization: Token YOUR_TOKEN_HERE"')


if __name__ == '__main__':
    test_slot_system()
    test_api_endpoints()
